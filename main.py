import os
import time
import logging
from collections import defaultdict
from flask import Flask, request
import telebot

# ====== 1. –ö–õ–Æ–ß–ò –ò –§–ê–ô–õ–´ =========================================
TOKEN        = os.environ["TELEGRAM_BOT_TOKEN"]
OPENAI_KEY   = os.environ["OPENAI_API_KEY"]
PDF_PATH     = "HomeAlanya_Bot_Knowledge_RU.pdf"
VECTOR_DIR   = "chroma_db"

# ====== 2. AI-–ë–ò–ë–õ–ò–û–¢–ï–ö–ò =========================================
from langchain_community.document_loaders import PyPDFLoader   # <-- langchain-community
from langchain.text_splitter     import RecursiveCharacterTextSplitter
from langchain.vectorstores      import Chroma
from langchain.embeddings.openai import OpenAIEmbeddings
from langchain.chains            import RetrievalQA
from langchain.chat_models       import ChatOpenAI

# ====== 3. –ù–ê–°–¢–†–û–ô–ö–ê –ë–û–¢–ê, –õ–û–ì–û–í, –ê–ù–¢–ò-–°–ü–ê–ú–ê =====================
bot = telebot.TeleBot(TOKEN)
app = Flask(__name__)
os.environ["OPENAI_API_KEY"] = OPENAI_KEY

# ‚Äî---------- –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    filename="log.txt",
    level=logging.INFO,
    format="%(asctime)s ‚Äî %(message)s",
    encoding="utf-8"
)

# ‚Äî---------- –∞–Ω—Ç–∏-—Å–ø–∞–º (5 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏)
user_last_msg = defaultdict(lambda: 0)
SPAM_TIMEOUT  = 5  # —Å–µ–∫—É–Ω–¥

# ====== 4. –ó–ê–ì–†–£–ó–ö–ê PDF –í –ü–ê–ú–Ø–¢–¨ =================================
loader   = PyPDFLoader(PDF_PATH)
pages    = loader.load()
chunks   = RecursiveCharacterTextSplitter(
              chunk_size=700, chunk_overlap=100
          ).split_documents(pages)
vectordb = Chroma.from_documents(
              chunks, OpenAIEmbeddings(), persist_directory=VECTOR_DIR)
retriever = vectordb.as_retriever()

qa = RetrievalQA.from_chain_type(
        llm=ChatOpenAI(model_name="gpt-3.5-turbo", temperature=0),
        retriever=retriever)

# ====== 5. WEBHOOK –î–õ–Ø TELEGRAM ==================================
@app.route(f"/{TOKEN}", methods=["POST"])
def webhook():
    update = telebot.types.Update.de_json(request.stream.read().decode("utf-8"))
    bot.process_new_updates([update])
    return "ok", 200

@app.route("/")
def index():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!"

# ====== 6. –û–ë–†–ê–ë–û–¢–ö–ê –°–û–û–ë–©–ï–ù–ò–ô ===================================
@bot.message_handler(commands=["start"])
def greet(m):
    msg = (
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –±–æ—Ç Home Alanya.\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å:\n"
        "‚Äî –ø–æ–∫—É–ø–∫–æ–π –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏\n"
        "‚Äî –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º –í–ù–ñ/–≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–∞\n"
        "‚Äî –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏ –∏ —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É."
    )
    bot.send_message(m.chat.id, msg)

@bot.message_handler(func=lambda _: True)
def answer(m):
    now = time.time()
    if now - user_last_msg[m.chat.id] < SPAM_TIMEOUT:
        bot.send_message(m.chat.id, "‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.")
        return
    user_last_msg[m.chat.id] = now

    logging.info(f"[IN]  {m.chat.id} | {m.text}")

    reply = qa.run(m.text)
    if "I don't know" in reply or reply.strip() == "":
        reply = (
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –º–µ–Ω—è –Ω–µ—Ç —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞.\n"
            "–Ø –ø–µ—Ä–µ–¥–∞–º –≤–∞—à –≤–æ–ø—Ä–æ—Å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ üìû"
        )

    logging.info(f"[OUT] {m.chat.id} | {reply}")
    bot.send_message(m.chat.id, reply)

# ====== 7. –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê ========================================
if __name__ == "__main__":
    bot.remove_webhook()
    bot.set_webhook(url=f"https://ha-telegram-bot.onrender.com/{TOKEN}")
    port = int(os.environ.get("PORT", 10000))
    app.run(host="0.0.0.0", port=port)
